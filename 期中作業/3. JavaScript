3.JavaScript
  (1)JavaScript 簡介:
  JavaScript 是一種高級的、直譯型的網頁腳本語言，用於為網頁添加動態功能和交互性。它是一種客戶端腳本語言，運行在網頁瀏覽器中，能夠與網頁的 HTML 元素進行互動並對其進行操作。
  以下是 JavaScript 的一些重要特點和用途：
  1.互動性和動態效果：JavaScript 使網頁能夠對用戶的操作做出反應，例如點擊按鈕、提交表單等。它可以動態地修改網頁內容、創建動畫效果、控制元素的顯示和隱藏等，使網頁更加生動和有趣。
  2.客戶端腳本語言：JavaScript 主要運行在網頁瀏覽器中，由瀏覽器解釋和執行。這意味著它可以直接在用戶端的瀏覽器中運行，無需額外的安裝和配置。
  3.DOM 操作：JavaScript 能夠使用網頁的 DOM（Document Object Model）來訪問和操作網頁元素。它可以動態地修改元素的內容、屬性、樣式等，並且可以通過事件處理程序對元素的事件進行監聽和響應。
  4.驗證和表單處理：JavaScript 可以在客戶端對用戶輸入的數據進行驗證和處理，減輕了對於服務器的請求和處理負擔。它可以檢查表單的內容、驗證用戶名和密碼、執行計算等。
  5.AJAX 和 API 調用：JavaScript 通過 AJAX 技術使得網頁能夠非同步地向服務器發送請求和接收數據，實現動態的頁面更新。此外，它可以通過調用各種 API（應用程序編程接口）來實現與服務器、第三方服務和其他 Web 服務的交互。
  6.面向對象編程：JavaScript 是一種支持面向對象編程（OOP）的語言，可以創建對象、定義類、繼承屬性和方法等。這使得 JavaScript 可以進行模組化開發、代碼重用和組織性更好的程式設計。
  JavaScript 在網頁開發中扮演著重要的角色，使得網頁更加互動和動態。它與 HTML 和 CSS 結合使用，能夠實現豐富的網頁功能和效果。現在的 JavaScript 還發展出了許多框架和庫，如 React、Vue、Angular 等，使得網頁開發更加高效和便捷。
  
  (2)JavaScript 變數:在 JavaScript 中，變數用於存儲和操作數據。在使用變數之前，需要先聲明（declare）它們，然後再進行賦值（assign value）和使用。
  在 JavaScript 中，可以使用 var、let 或 const 來聲明變數：
  使用 var 關鍵字聲明的變數是函數作用域（function-scoped），意味著它們的作用域僅限於聲明它們的函數內部。
  使用 let 和 const 關鍵字聲明的變數是區塊作用域（block-scoped），它們的作用域僅限於聲明它們的塊（例如，花括號 {}）內部。
  以下是聲明和賦值變數的示例：
  // 使用 var 聲明變數，並賦值為數字 10
  var x = 10;

  // 使用 let 聲明變數，並賦值為字符串 "Hello"
  let message = "Hello";

  // 使用 const 聲明常量，並賦值為布林值 true
  const PI = 3.14;
  在賦值變數後，可以使用變數名來訪問和操作它們的值：
  console.log(x); // 輸出：10
  console.log(message); // 輸出："Hello"
  console.log(PI); // 輸出：3.14

  // 修改變數的值
  x = 20;
  message = "World";

  console.log(x); // 輸出：20
  console.log(message); // 輸出："World"
  需要注意的是，使用 var 聲明的變數可以被重複聲明和賦值，而使用 let 或 const 聲明的變數在同一作用域內不能重複聲明。此外，const 用於聲明常量，其值不能被重新賦值。變數在 JavaScript 中可以存儲不同類型的數據，包括數字、字符串、布林值、陣列、物件等。它們的值可以隨時更改和操作，使得 JavaScript 成為一種靈活且強大的程式語言。

  (3)JavaScript 函數:在 JavaScript 中，函數（function）是一段可重複使用的程式碼區塊，用於執行特定的任務或計算。函數可以接受輸入（稱為參數）並返回結果。
  以下是定義和使用函數的示例：
  // 定義一個簡單的函數，用於計算兩個數字的和
  function add(a, b) {
    return a + b;
  }

  // 使用函數並獲取結果
  var result = add(5, 3);
  console.log(result); // 輸出：8
  在上面的示例中，我們定義了一個名為 add 的函數，它接受兩個參數 a 和 b，並將它們相加後返回結果。然後我們使用 add 函數並將 5 和 3 作為參數傳遞給它，並將結果賦值給變數 result，最後將 result 輸出到控制台。
  除了接受參數和返回結果，函數還可以具有其他功能，例如修改外部變數的值、執行條件判斷、循環運算等。函數可以根據需求進行組合和嵌套，形成更複雜的程式邏輯。
  JavaScript 中還存在匿名函數（Anonymous Function）和箭頭函數（Arrow Function）等特殊形式的函數。匿名函數是一個沒有名字的函數，通常用於作為其他函數的參數或在需要時立即執行。箭頭函數是一種簡潔的語法形式，它使用 => 符號來定義函數。
  以下是匿名函數和箭頭函數的示例：
  // 匿名函數示例
  var multiply = function(a, b) {
    return a * b;
  };

  // 使用箭頭函數計算數字的平方
  var square = (num) => {
    return num * num;
  };
  函數在 JavaScript 中是非常重要且常用的概念，它們能夠提高程式碼的可讀性、重用性和組織性。透過函數，可以將程式碼模塊化並進行抽象，使得程式開發更加高效和可維護。
  
  (4)JavaScript 條件語句:JavaScript 提供了多種條件語句，用於根據不同的條件來執行不同的程式碼塊。條件語句使我們能夠根據特定的條件來控制程式的流程。
  以下是 JavaScript 中常用的條件語句：
  1.if 語句：if 語句用於當條件為真時執行程式碼塊。
  if (condition) {
  // 當條件為真時執行的程式碼
  } else {
    // 當條件為假時執行的程式碼
  }
  2.else if 語句：可以使用 else if 語句來擴展 if 語句，以進一步檢查其他條件。
  if (condition1) {
  // 當 condition1 為真時執行的程式碼
  } else if (condition2) {
    // 當 condition2 為真時執行的程式碼
  } else {
    // 當所有條件都不滿足時執行的程式碼
  }
  3.switch 語句：switch 語句用於根據不同的值執行不同的程式碼塊。
  switch (expression) {
  case value1:
    // 當 expression 等於 value1 時執行的程式碼
    break;
  case value2:
    // 當 expression 等於 value2 時執行的程式碼
    break;
  default:
    // 當 expression 不等於任何一個值時執行的程式碼
  }
  4.三元運算符：三元運算符可以根據條件來選擇返回不同的值。
  condition ? value1 : value2;
  以上是 JavaScript 中常見的條件語句。這些語句使得我們能夠根據不同的條件來執行不同的程式碼，實現程式的控制流程和邏輯。
  
  (5)JavaScript 迴圈:在 JavaScript 中，迴圈用於重複執行程式碼塊，直到滿足特定條件為止。JavaScript 提供了多種迴圈結構，可以根據不同的需求選擇適合的迴圈。
  以下是 JavaScript 中常用的迴圈結構：
  1.for 迴圈：for 迴圈用於指定初始條件、迴圈條件和迭代動作，以重複執行程式碼塊。
  for (初始條件; 迴圈條件; 迭代動作) {
  // 執行的程式碼塊
  }
  例如，下面的範例展示了使用 for 迴圈打印數字 1 到 5：
  for (var i = 1; i <= 5; i++) {
  console.log(i);
  }
  2.while 迴圈：while 迴圈在每次迴圈之前檢查條件，只要條件為真，就會重複執行程式碼塊。
  while (條件) {
  // 執行的程式碼塊
  }
  例如，下面的範例展示了使用 while 迴圈打印數字 1 到 5：
  var i = 1;
  while (i <= 5) {
    console.log(i);
    i++;
  }
  3.do...while 迴圈：do...while 迴圈是一種類似 while 迴圈的結構，不同的是它會先執行一次程式碼塊，然後檢查條件，如果條件為真，就會繼續重複執行。
  do {
  // 執行的程式碼塊
  } while (條件);
  例如，下面的範例展示了使用 do...while 迴圈打印數字 1 到 5：
  var i = 1;
  do {
    console.log(i);
    i++;
  } while (i <= 5);
  這些迴圈結構使得我們能夠輕鬆實現重複執行程式碼的需求。根據具體的情況，可以選擇適合的迴圈結構，以達到所需的迴圈邏輯。

  (6)JavaScript 事件處理:在 JavaScript 中，事件處理是一種機制，用於對網頁中的互動事件（例如按鍵按下、滑鼠點擊、表單提交等）進行響應和處理。通過事件處理，可以在特定事件發生時執行相應的程式碼。
  以下是 JavaScript 中處理事件的基本步驟：
  1.選擇要處理事件的 HTML 元素：首先，需要選擇要監聽事件的 HTML 元素。可以使用 document.getElementById 或其他選擇器方法獲取元素的引用。
  var myElement = document.getElementById('myElement');
  2.附加事件監聽器：使用 addEventListener 方法將事件監聽器附加到選擇的元素上。事件監聽器是一個函數，當事件發生時會被觸發執行。
  myElement.addEventListener('click', function(event) {
    // 處理事件的程式碼
  });
  在上面的示例中，我們將一個 click 事件的監聽器附加到 myElement 元素上，當元素被點擊時，監聽器中的程式碼將被執行。event 是一個事件對象，它包含了有關事件的信息。
  3.處理事件：在事件監聽器的程式碼塊中，可以編寫處理事件的程式碼。這可以是任何 JavaScript 程式碼，例如修改元素的內容、發送請求到服務器、顯示提示訊息等。
  myElement.addEventListener('click', function(event) {
  // 處理事件的程式碼
  console.log('元素被點擊了！');
  });
  除了 click 事件外，還有許多其他的事件可以處理，例如 mouseover（滑鼠移到元素上）、keydown（按鍵按下）、submit（表單提交）等。可以根據需要選擇適合的事件來處理。
  此外，還可以使用內聯事件處理，將事件處理程式碼直接嵌入到 HTML 元素的屬性中，例如 onclick、onmouseover 等。然而，推薦使用 addEventListener 方法，因為它提供了更好的分離程式碼和 HTML 的方式，並且可以同時附加多個監聽器。
  事件處理使得我們能夠對用戶的操作進行即時響應和交互，實現動態和互動的網頁體驗。
  
  (7)JavaScript DOM 操作:在 JavaScript 中，DOM（Document Object Model）是表示網頁結構的一種程式化方式。通過操作 DOM，我們可以動態地修改網頁的內容、樣式和行為。
  以下是 JavaScript 中常見的 DOM 操作：
  1.獲取元素：使用不同的方法獲取網頁中的元素，例如 getElementById、getElementsByClassName、getElementsByTagName、querySelector 和 querySelectorAll。
  // 獲取具有指定 ID 的元素
  var myElement = document.getElementById('myElement');

  // 獲取所有具有指定類名的元素
  var elements = document.getElementsByClassName('myClass');

  // 獲取所有指定標籤名的元素
  var elements = document.getElementsByTagName('div');

  // 使用 CSS 選擇器獲取元素
  var myElement = document.querySelector('#myElement');
  var elements = document.querySelectorAll('.myClass');
  2.修改元素的內容：可以使用 innerHTML 屬性來設置或獲取元素的 HTML 內容，使用 textContent 屬性來設置或獲取元素的純文本內容。
  // 設置元素的 HTML 內容
  myElement.innerHTML = '<p>Hello, World!</p>';

  // 獲取元素的 HTML 內容
  var htmlContent = myElement.innerHTML;

  // 設置元素的純文本內容
  myElement.textContent = 'Hello, World!';

  // 獲取元素的純文本內容
  var textContent = myElement.textContent;
  3.修改元素的屬性和樣式：可以使用屬性來設置或獲取元素的各種屬性和樣式。
  // 設置元素的屬性
  myElement.setAttribute('src', 'image.jpg');

  // 獲取元素的屬性
  var src = myElement.getAttribute('src');

  // 設置元素的樣式
  myElement.style.color = 'red';

  // 獲取元素的樣式
  var color = myElement.style.color;
  4.創建和插入元素：可以使用 createElement 方法創建新的元素，使用 appendChild 方法將元素插入到父元素中。
  // 創建新的元素
  var newElement = document.createElement('div');

  // 將元素插入到父元素中
  myElement.appendChild(newElement);
  5.移除元素：可以使用 removeChild 方法將元素從父元素中移除。
  // 將元素從父元素中移除
  myParentElement.removeChild(myElement);
  這些是 JavaScript 中常用的 DOM 操作方法，它們使我們能夠以編程方式操作網頁的結構和內容。通過這些操作，可以實現網頁的動態更新和互動效果。
  
  (8)JavaScript AJAX:AJAX（Asynchronous JavaScript and XML）是一種在網頁上進行非同步通信的技術。它通過使用 JavaScript 和瀏覽器提供的內建功能，可以在不刷新整個網頁的情況下，向服務器發送和接收數據。
  以下是使用 JavaScript 實現 AJAX 的基本步驟：
  1.創建 XMLHttpRequest 對象：使用 JavaScript 中的 XMLHttpRequest 對象來發送 HTTP 請求。
  var xhr = new XMLHttpRequest();
  2.設置請求的詳細信息：設置請求的方法、URL 和是否為非同步請求。
  xhr.open('GET', 'https://example.com/api/data', true);
  3.設置回調函數：設置回調函數，以處理請求的不同狀態。
  xhr.onreadystatechange = function() {
    if (xhr.readyState === 4 && xhr.status === 200) {
      // 請求成功完成且獲取到數據
      var response = xhr.responseText;
      // 處理數據的程式碼
    } else {
      // 請求發生錯誤或未完成
      // 處理錯誤的程式碼
    }
  };
  4.發送請求：使用 send 方法發送請求。
  xhr.send();
  5.處理服務器響應：在回調函數中處理服務器的響應。可以使用 responseText 或 responseXML 屬性獲取服務器返回的數據。
  var response = xhr.responseText;
  通過以上步驟，可以使用 AJAX 在網頁上發送 HTTP 請求並獲取服務器的響應。可以根據需要對回傳的數據進行處理，例如更新網頁的內容、動態加載資料等。
  除了使用原生的 XMLHttpRequest，還可以使用像 jQuery、Axios 或 Fetch API 等庫來簡化 AJAX 的操作。這些庫提供了更高級的抽象和易於使用的接口，使 AJAX 開發更為方便。
